
Semantics of mutable state

Koen Wermer, Robert Hensing


------------------------------------------------------------------------------

 * A model language with mutable state
 * Hoare type system
 * Small step semantics
 * Type safety proof
 * Normalization proof
 * Some neat Hoare logic theorems

------------------------------------------------------------------------------

Basic semantics for mutable state (1)

data Type : Set where
  ...
  <>      : Type
  POINTER : Type -> Type

------------------------------------------------------------------------------

Basic semantics for mutable state (1)

new terms

  create cell with value
  update cell with value
  read cell value
  redirect pointer to other cell
  ;

------------------------------------------------------------------------------

TODO highlight what is interesting

data State : TypeEnv -> Set where
  state : (f : TypeEnv) -> ((p : Pointer) -> (Term (f p))) -> State f

data Step  : {ty : Type} {f : TypeEnv} -> State f -> Term ty → State f -> Term ty → Set where

------------------------------------------------------------------------------

Hoare logic

{P} c {Q}

------------------------------------------------------------------------------

Hoare logic (2)

{P} c1 {Q},   {Q} c2 {R}
________________________

    {P} c1 ; c2 {R}

------------------------------------------------------------------------------

Hoare type theory

{P} c : t {Q}

------------------------------------------------------------------------------

{P} c1 : t1 {Q},   {Q} c2 : t2 {R}
__________________________________

    {P} (c1 ; c2) : t2 {R}

------------------------------------------------------------------------------

Separation logic

"Modular reasoning"

{P} c {Q},   modifiedBy(c) ∩ freeVars(R) = ∅
____________________________________________

            {P * R} c {P * R}


------------------------------------------------------------------------------


Limitations

 * No abstractions
 * No programs in heap
 * Proving stuff is hard or Rice's theorem

------------------------------------------------------------------------------

Questions?

Literature

 - Swierstra, Wouter. A functional specification of effects. Diss. University of Nottingham, 2009.
 - Pierce, Benjamin C. Types and programming languages. MIT press, 2002.
 - Nanevski, Aleksandar, Greg Morrisett, and Lars Birkedal. "Hoare type theory, polymorphism and separation." Journal of Functional Programming 18.5-6 (2008): 865-911.
 - John C. Reynolds. Separation Logic: A Logic for Shared Mutable Data Structures. LICS 2002.

------------------------------------------------------------------------------